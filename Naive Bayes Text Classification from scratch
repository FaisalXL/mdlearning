{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 67,
      "metadata": {
        "id": "bnX6pvg5yysr"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import math"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split"
      ],
      "metadata": {
        "id": "MV3Vei8UGn8c"
      },
      "execution_count": 20,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#import dataset (from kaggle)\n",
        "#dataset from kaggle : https://www.kaggle.com/datasets/prishasawhney/email-classification-ham-spam"
      ],
      "metadata": {
        "id": "DIegc1AizCg3"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "path = \"/content/email_classification.csv\""
      ],
      "metadata": {
        "id": "Y-o2wia_2sW1"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data = pd.read_csv(path)"
      ],
      "metadata": {
        "id": "J4QZSLIH2dE8"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "KnkGnbAt2sGo",
        "outputId": "0e55aaed-81f4-4239-b2ab-7f0bbc571e1d"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                                 email  label\n",
              "0    Upgrade to our premium plan for exclusive acce...      0\n",
              "1    Happy holidays from our team! Wishing you joy ...      0\n",
              "2    We're hiring! Check out our career opportuniti...      0\n",
              "3    Your Amazon account has been locked. Click her...      1\n",
              "4    Your opinion matters! Take our survey and help...      0\n",
              "..                                                 ...    ...\n",
              "174  We're pleased to inform you that your refund h...      0\n",
              "175  Get rich quick! Invest in our revolutionary ne...      1\n",
              "176  Your free trial period is ending soon. Upgrade...      0\n",
              "177  Your order is on its way! Track your shipment ...      0\n",
              "178  Limited-time offer! Get 50% off on all purchas...      1\n",
              "\n",
              "[179 rows x 2 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5393eb6d-c289-4a35-a2d4-f62071a60179\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>email</th>\n",
              "      <th>label</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Upgrade to our premium plan for exclusive acce...</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Happy holidays from our team! Wishing you joy ...</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>We're hiring! Check out our career opportuniti...</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Your Amazon account has been locked. Click her...</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Your opinion matters! Take our survey and help...</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>174</th>\n",
              "      <td>We're pleased to inform you that your refund h...</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>175</th>\n",
              "      <td>Get rich quick! Invest in our revolutionary ne...</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>176</th>\n",
              "      <td>Your free trial period is ending soon. Upgrade...</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>177</th>\n",
              "      <td>Your order is on its way! Track your shipment ...</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>178</th>\n",
              "      <td>Limited-time offer! Get 50% off on all purchas...</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>179 rows Ã— 2 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5393eb6d-c289-4a35-a2d4-f62071a60179')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-5393eb6d-c289-4a35-a2d4-f62071a60179 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-5393eb6d-c289-4a35-a2d4-f62071a60179');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-041b81a6-e3a4-4d30-8973-730093a69724\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-041b81a6-e3a4-4d30-8973-730093a69724')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-041b81a6-e3a4-4d30-8973-730093a69724 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_3844d17b-0749-4fc2-9580-7a96a2431186\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('data')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_3844d17b-0749-4fc2-9580-7a96a2431186 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('data');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "data",
              "summary": "{\n  \"name\": \"data\",\n  \"rows\": 179,\n  \"fields\": [\n    {\n      \"column\": \"email\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 150,\n        \"samples\": [\n          \"Congratulations! You're the lucky winner of our holiday giveaway. Click here to claim your prize!\",\n          \"Congratulations on reaching a new milestone! Here's to many more achievements.\",\n          \"We're excited to share our latest updates with you. Stay tuned for more news!\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"label\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Implement the bag of words model.\n",
        "## count the occurance of each word in each class to predict the probability of the outcome for an instance the testClass\n",
        "## order is not maintaned hence the word \"bag\" of words since it is just a collection of the bags.\n",
        "## therefore P(x = \"someword\") = using likelihood we get number of instances where x_i = \"some word\"/total number of instances\n"
      ],
      "metadata": {
        "id": "edL9Hdsl256A"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data['label'] = data['label'].map({'ham':0,'spam': 1})"
      ],
      "metadata": {
        "id": "L62Y5OrU9HrI"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train, test = train_test_split(data,test_size = 0.4, random_state = 42)"
      ],
      "metadata": {
        "id": "ev7zPBxzGw8j"
      },
      "execution_count": 78,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "len(train),len(test)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GuXyzj-6Om8Z",
        "outputId": "cd302e1a-abac-45c6-d144-f34ee0edb742"
      },
      "execution_count": 80,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(107, 72)"
            ]
          },
          "metadata": {},
          "execution_count": 80
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "spam  = train[train['label'] == 1]\n",
        "notSpam = train[train['label'] == 0]"
      ],
      "metadata": {
        "id": "QntrrP7K9Nzk"
      },
      "execution_count": 81,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#implement the bag of words model\n",
        "import string\n",
        "bow_spam = {}\n",
        "bow_notspam = {}\n",
        "translator = str.maketrans('','',string.punctuation)\n",
        "\n",
        "for i in spam['email']:\n",
        "  for j in i.split():\n",
        "    x = j.translate(translator)\n",
        "    if(x in bow_spam):\n",
        "      bow_spam[x.lower()] += 1\n",
        "    else:\n",
        "      bow_spam[x.lower()] = 1\n",
        "# bow_spam\n",
        "for i in notSpam['email']:\n",
        "  for j in i.split():\n",
        "    x = j.translate(translator)\n",
        "    if(x in bow_notspam):\n",
        "      bow_notspam[x.lower()] += 1\n",
        "    else:\n",
        "      bow_notspam[x.lower()] = 1"
      ],
      "metadata": {
        "id": "BLdpqqRtBhaG"
      },
      "execution_count": 82,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#now we have bow for both classes we can look at a niave bayes classifier\n",
        "# predicting p(y|x) = p(x|y) * p(y)/p(x) since we are going to maximize it for each possible class for y, we can ignore the denominator since it is constant throughout\n",
        "p_spam = len(spam)/len(train)\n",
        "p_notSpam = len(notSpam)/len(train)\n",
        "p_notSpam, p_spam"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dPT9AVNjFVsG",
        "outputId": "6ccaa971-1278-4cb8-c0fb-9ad0246214f6"
      },
      "execution_count": 83,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(0.6074766355140186, 0.3925233644859813)"
            ]
          },
          "metadata": {},
          "execution_count": 83
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def calc_prob(X, bow, p_y): # X is set of the words in each position i\n",
        "  prob = math.log(p_y)\n",
        "  total_words = sum(bow.values())\n",
        "  for word in X:\n",
        "    numOccurances = bow.get(word,0)\n",
        "    map = math.log((numOccurances + 1)/(total_words + 1000)) #kinda like laplace smoothing, too lazy to find |V|\n",
        "    prob = prob + map\n",
        "  return prob"
      ],
      "metadata": {
        "id": "iCK5WD7-IISH"
      },
      "execution_count": 84,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "p_notSpam\n",
        "sum(bow_notspam.values())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yAnP6wWIRlBi",
        "outputId": "9e2696bb-262f-4fbf-e612-83e9b3dc5f44"
      },
      "execution_count": 85,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "702"
            ]
          },
          "metadata": {},
          "execution_count": 85
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#testing the naive bayes baby!\n",
        "preds = []\n",
        "for index,row in test.iterrows():\n",
        "  X = []\n",
        "  for word in row['email'].split():\n",
        "    stripped_word = word.translate(translator)\n",
        "    X.append(stripped_word)\n",
        "  p_isSpam = calc_prob(X,bow_spam,p_spam)\n",
        "  p_isnotSpam = calc_prob(X,bow_notspam,p_notSpam)\n",
        "  if p_isSpam >= p_isnotSpam:\n",
        "    print(f\"the prediction is {1} and the actual label is {row['label']}\")\n",
        "    preds.append(1)\n",
        "  else:\n",
        "    print(f\"the prediction is {0} and the actual label is {row['label']}\")\n",
        "    preds.append(0)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wPooCUN_OSVt",
        "outputId": "1cb19682-bded-4d90-d00d-a0768a68a7c2"
      },
      "execution_count": 86,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "the prediction is 1 and the actual label is 1\n",
            "the prediction is 1 and the actual label is 1\n",
            "the prediction is 1 and the actual label is 1\n",
            "the prediction is 1 and the actual label is 1\n",
            "the prediction is 1 and the actual label is 1\n",
            "the prediction is 1 and the actual label is 1\n",
            "the prediction is 0 and the actual label is 0\n",
            "the prediction is 1 and the actual label is 1\n",
            "the prediction is 1 and the actual label is 1\n",
            "the prediction is 0 and the actual label is 0\n",
            "the prediction is 1 and the actual label is 1\n",
            "the prediction is 0 and the actual label is 0\n",
            "the prediction is 1 and the actual label is 1\n",
            "the prediction is 0 and the actual label is 0\n",
            "the prediction is 1 and the actual label is 1\n",
            "the prediction is 0 and the actual label is 0\n",
            "the prediction is 1 and the actual label is 1\n",
            "the prediction is 1 and the actual label is 1\n",
            "the prediction is 0 and the actual label is 0\n",
            "the prediction is 0 and the actual label is 0\n",
            "the prediction is 1 and the actual label is 1\n",
            "the prediction is 0 and the actual label is 0\n",
            "the prediction is 1 and the actual label is 1\n",
            "the prediction is 1 and the actual label is 1\n",
            "the prediction is 0 and the actual label is 0\n",
            "the prediction is 0 and the actual label is 0\n",
            "the prediction is 1 and the actual label is 1\n",
            "the prediction is 0 and the actual label is 0\n",
            "the prediction is 0 and the actual label is 0\n",
            "the prediction is 0 and the actual label is 0\n",
            "the prediction is 0 and the actual label is 0\n",
            "the prediction is 1 and the actual label is 1\n",
            "the prediction is 1 and the actual label is 1\n",
            "the prediction is 1 and the actual label is 1\n",
            "the prediction is 1 and the actual label is 1\n",
            "the prediction is 1 and the actual label is 1\n",
            "the prediction is 0 and the actual label is 0\n",
            "the prediction is 1 and the actual label is 1\n",
            "the prediction is 1 and the actual label is 1\n",
            "the prediction is 1 and the actual label is 1\n",
            "the prediction is 1 and the actual label is 0\n",
            "the prediction is 1 and the actual label is 1\n",
            "the prediction is 1 and the actual label is 0\n",
            "the prediction is 0 and the actual label is 0\n",
            "the prediction is 0 and the actual label is 0\n",
            "the prediction is 1 and the actual label is 1\n",
            "the prediction is 1 and the actual label is 0\n",
            "the prediction is 0 and the actual label is 0\n",
            "the prediction is 1 and the actual label is 0\n",
            "the prediction is 0 and the actual label is 0\n",
            "the prediction is 1 and the actual label is 1\n",
            "the prediction is 0 and the actual label is 0\n",
            "the prediction is 0 and the actual label is 0\n",
            "the prediction is 0 and the actual label is 0\n",
            "the prediction is 0 and the actual label is 0\n",
            "the prediction is 1 and the actual label is 1\n",
            "the prediction is 1 and the actual label is 1\n",
            "the prediction is 0 and the actual label is 0\n",
            "the prediction is 0 and the actual label is 0\n",
            "the prediction is 0 and the actual label is 0\n",
            "the prediction is 0 and the actual label is 0\n",
            "the prediction is 1 and the actual label is 1\n",
            "the prediction is 1 and the actual label is 1\n",
            "the prediction is 1 and the actual label is 1\n",
            "the prediction is 0 and the actual label is 0\n",
            "the prediction is 1 and the actual label is 1\n",
            "the prediction is 1 and the actual label is 1\n",
            "the prediction is 1 and the actual label is 0\n",
            "the prediction is 0 and the actual label is 0\n",
            "the prediction is 1 and the actual label is 1\n",
            "the prediction is 0 and the actual label is 0\n",
            "the prediction is 1 and the actual label is 1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "len(preds),len(test['label'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oa09NK7mVvqS",
        "outputId": "a0c415af-1943-4f0c-eda3-8788bbed89f8"
      },
      "execution_count": 87,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(72, 72)"
            ]
          },
          "metadata": {},
          "execution_count": 87
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# prompt: trying to find accuracy with list preds and series test['label']\n",
        "\n",
        "from sklearn.metrics import accuracy_score\n",
        "accuracy = accuracy_score(test['label'],preds)\n",
        "print(accuracy)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1PO6bh47V9kr",
        "outputId": "38d8db5b-d134-4a9d-8715-ac51c3a8a5dc"
      },
      "execution_count": 88,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.9305555555555556\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "3aBNBsm7WFK4"
      },
      "execution_count": 88,
      "outputs": []
    }
  ]
}
